/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
libs ( "libOpenFOAM.so" "libgroovyBC.so" ) ;
application     icoFoam;

startFrom        startTime;

startTime       0;

stopAt           endTime;

endTime         5;

deltaT          0.025;

writeControl     timeStep;

writeInterval    10;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

functions
{
  vorticity
    {
        type            vorticity;
        libs            ("libfieldFunctionObjects.so");
        writeControl    writeTime;
    }

    forces
    {
        type            forceCoeffs;
        libs            ("libforces.so");
        log             yes;
        writeControl timeStep;
        writeInterval 40;

        patches
        (
            cylinder
        );

        rho rhoInf;
      p p;
      U U;
        rhoInf      1;

        CofR        (0 0 0);
        liftDir     (0 1 0);
        dragDir     (1 0 0);
        pitchAxis   (0 0 1);
        magUInf     1;
        lRef        1;
        Aref        1;
    }


  error
  {
      // Load the library containing the 'coded' functionObject
      libs            ("libutilityFunctionObjects.so");

      type coded;

      // Name of on-the-fly generated functionObject
      name error;

      codeEnd
      #{
          // Lookup U
          Info<< "Looking up field U\n" << endl;
          const volVectorField& U = mesh().lookupObject<volVectorField>("U");

          Info<< "Reading inlet velocity uInfX\n" << endl;

          scalar ULeft = 0.0;
          label leftI = mesh().boundaryMesh().findPatchID("left");
          const fvPatchVectorField& fvp = U.boundaryField()[leftI];
          if (fvp.size())
          {
              ULeft = fvp[0].x();
          }
          reduce(ULeft, maxOp<scalar>());

          dimensionedScalar uInfX
          (
              "uInfx",
              dimensionSet(0, 1, -1, 0, 0),
              ULeft
          );

          Info << "U at inlet = " << uInfX.value() << " m/s" << endl;


          scalar magCylinder = 0.0;
          label cylI = mesh().boundaryMesh().findPatchID("cylinder");
          const fvPatchVectorField& cylFvp = mesh().C().boundaryField()[cylI];
          if (cylFvp.size())
          {
              magCylinder = mag(cylFvp[0]);
          }
          reduce(magCylinder, maxOp<scalar>());

          dimensionedScalar radius
          (
              "radius",
              dimensionSet(0, 1, 0, 0, 0),
              magCylinder
          );

          Info << "Cylinder radius = " << radius.value() << " m" << endl;

          volVectorField UA
          (
              IOobject
              (
                  "UA",
                  mesh().time().timeName(),
                  U.mesh(),
                  IOobject::NO_READ,
                  IOobject::AUTO_WRITE
              ),
              U
          );

          Info<< "\nEvaluating analytical solution" << endl;

          const volVectorField& centres = UA.mesh().C();
          volScalarField magCentres(mag(centres));
          volScalarField theta(acos((centres & vector(1,0,0))/magCentres));

          volVectorField cs2theta
          (
              cos(2*theta)*vector(1,0,0)
            + sin(2*theta)*vector(0,1,0)
          );

          UA = uInfX*(dimensionedVector(vector(1,0,0))
            - pow((radius/magCentres),2)*cs2theta);

          // Force writing of UA (since time has not changed)
          UA.write();

          volScalarField error("error", mag(U-UA)/mag(UA));

          Info<<"Writing relative error in U to " << error.objectPath()
              << endl;

          error.write();
      #};
  }
}


// ************************************************************************* //
