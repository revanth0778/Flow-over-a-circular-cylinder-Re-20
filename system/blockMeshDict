/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{

pointField points(48);
points[0]  = point(0.5, 0, -0.5);
points[1]  = point(3, 0, -0.5);
points[2]  = point(25, 0, -0.5);
points[3]  = point(25, 0.353553, -0.5);
points[4]  = point(25, 3, -0.5);
points[5]  = point(25, 8, -0.5);
points[6]  = point(3, 8, -0.5);
points[7]  = point(3, 3, -0.5);
points[8]  = point(3, 0.353553, -0.5);
points[9]  = point(0.353553, 0.353553, -0.5);
points[10] = point(0.353553, 3, -0.5);
points[11] = point(0.353553, 8, -0.5);
points[12] = point(0, 8, -0.5);
points[13] = point(0, 3, -0.5);
points[14] = point(0, 0.5, -0.5);
points[15] = point(-0.5, 0, -0.5);
points[16] = point(-0.353553, 0.353553, -0.5);
points[17] = point(-0.353553, 3, -0.5);
points[18] = point(-0.353553, 8, -0.5);
points[19] = point(-3, 8, -0.5);
points[20] = point(-3, 3, -0.5);
points[21] = point(-3, 0.353553, -0.5);
points[22] = point(-3, 0, -0.5);
points[23] = point(-8, 0, -0.5);
points[24] = point(-8, 0.353553, -0.5);
points[25] = point(-8, 3, -0.5);
points[26] = point(-8, 8, -0.5);

points[27]  = point(25, -0.353553, -0.5);
points[28]  = point(25, -3, -0.5);
points[29]  = point(25, -8, -0.5);
points[30]  = point(3, -8, -0.5);
points[31]  = point(3, -3, -0.5);
points[32]  = point(3, -0.353553, -0.5);
points[33]  = point(0.353553, -0.353553, -0.5);
points[34] = point(0.353553, -3, -0.5);
points[35] = point(0.353553, -8, -0.5);
points[36] = point(0, -8, -0.5);
points[37] = point(0, -3, -0.5);
points[38] = point(0, -0.5, -0.5);
points[39] = point(-0.353553, -0.353553, -0.5);
points[40] = point(-0.353553, -3, -0.5);
points[41] = point(-0.353553, -8, -0.5);
points[42] = point(-3, -8, -0.5);
points[43] = point(-3, -3, -0.5);
points[44] = point(-3, -0.353553, -0.5);
points[45] = point(-8, -0.353553, -0.5);
points[46] = point(-8, -3, -0.5);
points[47] = point(-8, -8, -0.5);
// Duplicate z points
label sz = points.size();
points.setSize(2*sz);
for (label i = 0; i < sz; i++)
{
    const point& pt = points[i];
    points[i+sz] = point(pt.x(), pt.y(), -pt.z());
}


        os  << points;
    #};
};


blocks
(

    hex (23 22 21 24 71 70 69 72) (55 7 1) simpleGrading (0.3433826432 1 1) //0
    hex (22 15 16 21 70 63 64 69) (50 7 1) simpleGrading (1 1 1) //1
    hex (0 1 8 9 48 49 56 57) (50 7 1) simpleGrading (1 1 1) //2
    hex (1 2 3 8 49 50 51 56) (115 7 1) simpleGrading (9.56 1 1) //3
    hex (8 3 4 7 56 51 52 55) (115 50 1) simpleGrading (9.56 1 1) //4
    hex (9 8 7 10 57 56 55 58) (50 50 1) simpleGrading (1 1 1) //5
    hex (14 9 10 13 62 57 58 61) (7 50 1) simpleGrading (1 1 1) //6
    hex (16 14 13 17 64 62 61 65) (7 50 1) simpleGrading (1 1 1) //7
    hex (21 16 17 20 69 64 65 68) (50 50 1) simpleGrading (1 1 1) //8
    hex (24 21 20 25 72 69 68 73) (55 50 1) simpleGrading (0.3433826432 1 1) //9
    hex (25 20 19 26 73 68 67 74) (55 55 1) simpleGrading (0.3433826432 2.91 1) //10
    hex (20 17 18 19 68 65 66 67) (50 55 1) simpleGrading (1 2.91 1) //11
    hex (17 13 12 18 65 61 60 66) (7 55 1) simpleGrading (1 2.91 1) //12
    hex (13 10 11 12 61 58 59 60) (7 55 1) simpleGrading (1 2.91 1) //13
    hex (10 7 6 11 58 55 54 59) (50 55 1) simpleGrading (1 2.91 1) //14
    hex (7 4 5 6 55 52 53 54) (115 55 1) simpleGrading (9.56 2.91 1) //15


    hex (45 44 22 23 93 92 70 71) (55 7 1) simpleGrading (0.3433826432 1 1) //16
    hex (44 39 15 22 92 87 63 70) (50 7 1) simpleGrading (1 1 1) //17
    hex (33 32 1 0 81 80 49 48) (50 7 1) simpleGrading (1 1 1) //18
    hex (32 27 2 1 80 75 50 49) (115 7 1) simpleGrading (9.56 1 1) //19
    hex (31 28 27 32 79 76 75 80) (115 50 1) simpleGrading (9.56 1 1) //20
    hex (34 31 32 33 82 79 80 81) (50 50 1) simpleGrading (1 1 1) //21
    hex (37 34 33 38 85 82 81 86) (7 50 1) simpleGrading (1 1 1) //22
    hex (40 37 38 39 88 85 86 87) (7 50 1) simpleGrading (1 1 1) //23
    hex (43 40 39 44 91 88 87 92) (50 50 1) simpleGrading (1 1 1) //24
    hex (46 43 44 45 94 91 92 93) (55 50 1) simpleGrading (0.3433826432 1 1) //25
    hex (47 42 43 46 95 90 91 94) (55 55 1) simpleGrading (0.3433826432 0.3433826432 1) //26
    hex (42 41 40 43 90 89 88 91) (50 55 1) simpleGrading (1 0.3433826432 1) //27
    hex (41 36 37 40 89 84 85 88) (7 55 1) simpleGrading (1 0.3433826432 1) //28
    hex (36 35 34 37 84 83 82 85) (7 55 1) simpleGrading (1 0.3433826432 1) //29
    hex (35 30 31 34 83 78 79 82) (50 55 1) simpleGrading (1 0.3433826432 1) //30
    hex (30 29 28 31 78 77 76 79) (115 55 1) simpleGrading (9.56 0.3433826432 1) //31

);

edges
(
  arc 0 9 (0.469846 0.17101 -0.5)
  arc 9 14 (0.17101 0.469846 -0.5)
  arc 16 14 (-0.17101 0.469846 -0.5)
  arc 15 16 (-0.469846 0.17101 -0.5)

  arc 0 33 (0.469846 -0.17101 -0.5)
  arc 33 38 (0.17101 -0.469846 -0.5)
  arc 38 39 (-0.17101 -0.469846 -0.5)
  arc 39 15 (-0.469846 -0.17101 -0.5)

  arc 48 57 (0.469846 0.17101 0.5)
  arc 57 62 (0.17101 0.469846 0.5)
  arc 64 62 (-0.17101 0.469846 0.5)
  arc 63 64 (-0.469846 0.17101 0.5)

  arc 48 81 (0.469846 -0.17101 0.5)
  arc 81 86 (0.17101 -0.469846 0.5)
  arc 86 87 (-0.17101 -0.469846 0.5)
  arc 87 63 (-0.469846 -0.17101 0.5)





);

boundary
(
    down
    {
        type symmetryPlane;
        faces
        (

            (47 42 95 90)
            (42 41 90 89)
            (41 36 89 84)
            (36 35 84 83)
            (35 30 83 78)
            (30 29 78 77)



        );
    }
    right
    {
        type patch;
        faces
        (
            (2 3 50 51)
            (3 4 51 52)
            (4 5 52 53)
            (2 27 50 75)
            (27 28 75 76)
            (28 29 76 77)

        );
    }
    up
    {
        type symmetryPlane;
        faces
        (
            (26 19 74 67)
            (19 18 67 66)
            (18 12 66 60)
            (12 11 60 59)
            (11 6 59 54)
            (6 5 54 53)
        );
    }
    left
    {
        type patch;
        faces
        (
            (26 25 74 73)
            (25 24 73 72)
            (24 23 72 71)
            (23 45 71 93)
            (45 46 93 94)
            (46 47 94 95)
        );
    }
    cylinder
    {
        type wall;
        faces
        (
            (0 9 48 57)
            (9 14 57 62)
            (14 16 62 64)
            (15 16 63 64)
            (15 39 63 87)
            (39 38 87 86)
            (38 33 86 81)
            (33 0 81 48)
        );
    }
  frontAndBack
{
    type empty;
    faces
    (
      (23 22 21 24)
      (71 70 69 72)
      (22 15 16 21)
      (70 63 64 69)
      (0 1 8 9)
      (48 49 56 57)
      (1 2 3 8)
      (49 50 51 56)
      (8 3 4 7)
      (56 51 52 55)
      (9 8 7 10)
      (57 56 55 58)
      (14 9 10 13)
      (62 57 58 61)
      (16 14 13 17)
      (64 62 61 65)
      (21 16 17 20)
      (69 64 65 68)
      (24 21 20 25)
      (72 69 68 73)
      (25 20 19 26)
      (73 68 67 74)
      (20 17 18 19)
      (68 65 66 67)
      (17 13 12 18)
      (65 61 60 66)
      (13 10 11 12)
      (61 58 59 60)
      (10 7 6 11)
      (58 55 54 59)
      (7 4 5 6)
      (55 52 53 54)


      (45 44 22 23)
      (93 92 70 71)
      (44 39 15 22)
      (92 87 63 70)
      (33 32 1 0)
      (81 80 49 48)
      (32 27 2 1)
      (80 75 50 49)
      (31 28 27 32)
      (79 76 75 80)
      (34 31 32 33)
      (82 79 80 81)
      (37 34 33 38)
      (85 82 81 86)
      (40 37 38 39)
      (88 85 86 87)
      (43 40 39 44)
      (91 88 87 92)
      (46 43 44 45)
      (94 91 92 93)
      (47 42 43 46)
      (95 90 91 94)
      (42 41 40 43)
      (90 89 88 91)
      (41 36 37 40)
      (89 84 85 88)
      (36 35 34 37)
      (84 83 82 85)
      (35 30 31 34)
      (83 78 79 82)
      (30 29 28 31)
      (78 77 76 79)

);
}





);

mergePatchPairs
(
);

// ************************************************************************* //

// ************************************************************************* //
